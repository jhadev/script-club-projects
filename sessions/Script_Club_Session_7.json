{
  "title": "Script Club - Session 7",
  "description": "Async programming for Edgeworker taks, callbacks and their limitations, promises, async/await.",
  "head": "<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
  "htmlAttrs": "lang=\"en\" class=\"\"",
  "tags": [],
  "autoupdate": true,
  "autosave": false,
  "autotest": false,
  "delay": 1500,
  "formatOnsave": false,
  "view": "split",
  "mode": "full",
  "theme": "dark",
  "themeColor": "hsl(220, 20%, 50%)",
  "layout": "responsive",
  "editorTheme": "",
  "recoverUnsaved": true,
  "showSpacing": false,
  "welcome": true,
  "readonly": false,
  "allowLangChange": true,
  "activeEditor": "markup",
  "languages": [
    "js",
    "ts"
  ],
  "markup": {
    "language": "html",
    "content": ""
  },
  "style": {
    "language": "css",
    "content": ""
  },
  "script": {
    "language": "javascript",
    "content": "// JavaScript Training Session 7: Asynchronous JavaScript\n\n// === 1. Callbacks: Usage and Limitations ===\nfunction fetchUserData(userId, callback) {\n  setTimeout(() => {\n    // Simulate EdgeWorkers fetch (Session 5: objects)\n    if (userId < 0) return callback(\"Invalid user ID\");\n    callback(null, { id: userId, name: \"Alice\" });\n  }, 1000);\n}\nfetchUserData(123, (error, result) => {\n  if (error) console.error(\"Error:\", error);\n  else console.log(\"User (callback):\", result); // Output: User (callback): { id: 123, name: \"Alice\" }\n});\n\n// Callback hell example\nfetchUserData(123, (error, user) => {\n  if (error) return console.error(error);\n  fetchUserData(user.id + 1, (error, nextUser) => {\n    if (error) return console.error(error);\n    console.log(\"Users (nested):\", [user, nextUser]); // Output: Users (nested): [{ id: 123, name: \"Alice\" }, { id: 124, name: \"Alice\" }]\n  });\n});\n\n// EdgeWorkers example: Process request path\nfunction processRequest(path, callback) {\n  setTimeout(() => {\n    if (!path.startsWith(\"/api\")) return callback(\"Invalid path\"); \n    callback(null, `Processed: ${path}`);\n  }, 500);\n}\nprocessRequest(\"/api/user\", (error, result) => {\n  if (error) console.error(\"Error:\", error);\n  else console.log(\"Request (callback):\", result); // Output: Request (callback): Processed: /api/user\n});\n\n// === 2. Promises: Creation, Chaining, Error Handling ===\nfunction fetchUserDataPromise(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (userId < 0) reject(\"Invalid user ID\");\n      resolve({ id: userId, name: \"Alice\" }); // Session 5: objects\n    }, 1000);\n  });\n}\nfetchUserDataPromise(123)\n  .then(user => console.log(\"User (Promise):\", user)) // Output: User (Promise): { id: 123, name: \"Alice\" }\n  .catch(error => console.error(\"Error:\", error));\n\n// Promise chaining\nfetchUserDataPromise(123)\n  .then(user => fetchUserDataPromise(user.id + 1))\n  .then(nextUser => console.log(\"Next user (chained):\", nextUser)) // Output: Next user (chained): { id: 124, name: \"Alice\" }\n  .catch(error => console.error(\"Error:\", error));\n\n// EdgeWorkers example: Process request\nfunction processRequestPromise(path) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!path.match(/^\\/api/)) reject(\"Invalid path\");\n      resolve(`Processed: ${path}`);\n    }, 500);\n  });\n}\nprocessRequestPromise(\"/api/user\")\n  .then(result => console.log(\"Request (Promise):\", result)) // Output: Request (Promise): Processed: /api/user\n  .catch(error => console.error(\"Error:\", error));\n\n// === 3. Async/Await (ES6 Syntax) ===\nasync function fetchUserDataAsync(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (userId < 0) reject(\"Invalid user ID\");\n      resolve({ id: userId, name: \"Alice\" });\n    }, 1000);\n  });\n}\nasync function getUser() {\n  try {\n    let user = await fetchUserDataAsync(123);\n    console.log(\"User (async/await):\", user); // Output: User (async/await): { id: 123, name: \"Alice\" }\n  } catch (error) {\n    console.error(\"Error:\", error); // Error handling (Session 3)\n  }\n}\ngetUser();\n\n// EdgeWorkers example: Process request\nasync function processRequestAsync(path) {\n  try {\n    let result = await new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (!path.includes(\"/api\")) reject(\"Invalid path\"); // Session 6: strings\n        resolve(`Processed: ${path}`);\n      }, 500);\n    });\n    console.log(\"Request (async/await):\", result); // Output: Request (async/await): Processed: /api/user\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n}\nprocessRequestAsync(\"/api/user\");\n\n// === 4. Async Operations in V8 for EdgeWorkers ===\nasync function handleEdgeWorkerRequest(url) {\n  try {\n    let urlObj = new URL(url); // Session 6: URL API\n    if (!urlObj.pathname.match(/^\\/api/)) throw new Error(\"Invalid route\"); // Session 6: regex\n    // Simulate EdgeWorkers httpRequest\n    let response = await new Promise((resolve) => {\n      setTimeout(() => resolve({ status: 200, body: \"Success\" }), 500);\n    });\n    return `Response: ${response.status} ${response.body}`; // Session 6: template literals\n  } catch (error) {\n    console.error(\"EdgeWorker error:\", error.message);\n    return \"Error: Failed request\";\n  }\n}\nhandleEdgeWorkerRequest(\"https://example.com/api/user\")\n  .then(result => console.log(\"EdgeWorker:\", result)) // Output: EdgeWorker: Response: 200 Success\n  .catch(error => console.error(\"Error:\", error));\n\n// EdgeWorkers config fetch\nasync function fetchConfig(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (id < 0) reject(\"Invalid config ID\");\n      resolve({ id, data: \"Config loaded\" });\n    }, 500);\n  });\n}\nasync function processEdgeWorkerConfig(url) {\n  try {\n    let { searchParams } = new URL(url); // Session 6: URL API\n    let id = Number(searchParams.get(\"id\")); // Session 6: URLSearchParams\n    let config = await fetchConfig(id);\n    console.log(\"EdgeWorker config:\", config.data); // Output: EdgeWorker config: Config loaded\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n}\nprocessEdgeWorkerConfig(\"https://example.com/config?id=123\");"
  },
  "stylesheets": [],
  "scripts": [],
  "cssPreset": "",
  "imports": {},
  "types": {},
  "tests": {
    "language": "typescript",
    "content": ""
  },
  "tools": {
    "enabled": "all",
    "active": "console",
    "status": "full"
  },
  "zoom": 1,
  "processors": [],
  "customSettings": {},
  "editor": "monaco",
  "fontFamily": "Fira Code",
  "fontSize": 14,
  "useTabs": false,
  "tabSize": 2,
  "lineNumbers": true,
  "wordWrap": false,
  "closeBrackets": true,
  "foldRegions": false,
  "semicolons": true,
  "singleQuote": false,
  "trailingComma": true,
  "emmet": true,
  "enableAI": false,
  "version": "46"
}