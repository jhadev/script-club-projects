{
  "title": "Script_Club-Session_7",
  "description": "",
  "head": "<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
  "htmlAttrs": "lang=\"en\" class=\"\"",
  "tags": [],
  "autoupdate": true,
  "autosave": false,
  "autotest": false,
  "delay": 1500,
  "formatOnsave": false,
  "view": "split",
  "mode": "full",
  "theme": "dark",
  "layout": "responsive",
  "recoverUnsaved": true,
  "showSpacing": false,
  "welcome": true,
  "readonly": false,
  "allowLangChange": true,
  "activeEditor": "script",
  "languages": [
    "javascript",
    "typescript"
  ],
  "markup": {
    "language": "html",
    "content": ""
  },
  "style": {
    "language": "css",
    "content": ""
  },
  "script": {
    "language": "javascript",
    "content": "/*\nFood delivery\n\n1. Take customer's order\n2. Process payment\n3. Prepare Food\n4. Deliver Food\n*/\n\n// Callback example\n\nfunction takeOrder(customer, callback) {\n  console.log(`Taking order from ${customer}`)\n  setTimeout(() => {\n    callback()\n  }, 1000)\n}\n\nfunction processPayment(callback) {\n  console.log(`Processing payment...`)\n  setTimeout(() => {\n    callback()\n  }, 1000)\n}\n\nfunction prepareFood(callback) {\n  console.log(`Preparing food...`)\n  setTimeout(() => {\n    callback()\n  }, 2000)\n}\n\nfunction deliverFood(callback) {\n  console.log(`Delivering food...`)\n  setTimeout(() => {\n    callback()\n  }, 1500)\n}\n\n// callback hell!\n\n/*\nUnreadable code\nNested functions\nDifficult to debug\nError handling will make it even more unreadable\nCode duplication\n*/\n\n// takeOrder(\"John\", () => {\n//   processPayment(() => {\n//     prepareFood(() => {\n//       deliverFood(() => {\n//         console.log(\"Order completed\");\n//       });\n//     });\n//   });\n// });\n\n// Promises\n\nfunction takeOrderPromise(customer) {\n  return new Promise((resolve, reject) => {\n    if (typeof customer === \"number\") reject (\"Invalid customer name\");\n    console.log(`Taking order from ${customer}`);\n    setTimeout(resolve, 1000);\n  });\n}\n\nfunction processPaymentPromise() {\n  return new Promise((resolve) => {\n    console.log(\"Processing payment...\");\n    setTimeout(resolve, 1000);\n  });\n}\n\nfunction prepareFoodPromise() {\n  return new Promise((resolve) => {\n    console.log(\"Preparing food...\");\n    setTimeout(resolve, 2000);\n  });\n}\n\nfunction deliverFoodPromise() {\n  return new Promise((resolve) => {\n    console.log(\"Delivering food...\");\n    setTimeout(resolve, 1500);\n  });\n}\n\n// Chain promises\ntakeOrderPromise(\"Jonn\")\n  .then(processPaymentPromise)\n  .then(prepareFoodPromise)\n  .then(deliverFoodPromise)\n  .then(() => console.log(\"Order completed!\"))\n  .catch(error => console.error(`Error: ${error}`));\n\n// async function processOrder(customer) {\n//   console.log(`Taking order from ${customer}`);\n//   await new Promise((resolve) => setTimeout(resolve, 1000));\n\n//   console.log(\"Processing payment...\");\n//   await new Promise((resolve) => setTimeout(resolve, 1000));\n\n//   console.log(\"Preparing food...\");\n//   await new Promise((resolve) => setTimeout(resolve, 2000));\n\n//   console.log(\"Delivering food...\");\n//   await new Promise((resolve) => setTimeout(resolve, 1500));\n\n//   console.log(\"Order completed!\");\n// }\n\n// processOrder(\"John\");\n"
  },
  "stylesheets": [],
  "scripts": [],
  "cssPreset": "",
  "imports": {},
  "types": {},
  "tests": {
    "language": "typescript",
    "content": ""
  },
  "tools": {
    "enabled": "all",
    "active": "console",
    "status": "full"
  },
  "zoom": 1,
  "processors": [],
  "customSettings": {},
  "useTabs": false,
  "tabSize": 2,
  "lineNumbers": true,
  "wordWrap": false,
  "closeBrackets": true,
  "foldRegions": false,
  "semicolons": true,
  "singleQuote": false,
  "trailingComma": true,
  "emmet": true,
  "enableAI": false,
  "version": "46"
}