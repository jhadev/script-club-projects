{
  "title": "Script Club - Session 5",
  "description": "Objects, properties and methods, modifying objects, ES6 features and JSON basics.",
  "head": "<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
  "htmlAttrs": "lang=\"en\" class=\"\"",
  "tags": [],
  "autoupdate": true,
  "autosave": false,
  "autotest": false,
  "delay": 1500,
  "formatOnsave": false,
  "view": "split",
  "mode": "full",
  "theme": "dark",
  "themeColor": "hsl(220, 20%, 50%)",
  "layout": "responsive",
  "editorTheme": "",
  "recoverUnsaved": true,
  "showSpacing": false,
  "welcome": true,
  "readonly": false,
  "allowLangChange": true,
  "activeEditor": "markup",
  "languages": [
    "js",
    "ts"
  ],
  "markup": {
    "language": "html",
    "content": ""
  },
  "style": {
    "language": "css",
    "content": ""
  },
  "script": {
    "language": "javascript",
    "content": "// JavaScript Training Session 5: Objects and ES6 Features\n\n// === 1. Object Literals, Properties, and Methods ===\nlet user = {\n    name: \"Alice\",\n    age: 25,\n    isStudent: true,\n    greet: function() {\n        return `Hello, ${this.name}!`;\n    }\n};\nconsole.log(\"User name:\", user.name); \nconsole.log(\"Greeting:\", user.greet());\n\n// Example with function\nlet product = {\n    name: \"Laptop\",\n    price: 1000,\n    applyDiscount: function(discount) {\n        return this.price * (1 - discount);\n    }\n};\nconsole.log(\"Discounted price:\", product.applyDiscount(0.1));\n\n// === 2. Accessing and Modifying Properties ===\nlet person = {\n    firstName: \"Bob\",\n    \"last-name\": \"Smith\"\n};\nconsole.log(\"First name:\", person.firstName); \nconsole.log(\"Last name:\", person[\"last-name\"]); \nperson.age = 30; // Add property\nperson.firstName = \"Robert\"; // Update property\nconsole.log(\"Updated person:\", person); // Output: Updated person: { firstName: \"Robert\", last-name: \"Smith\", age: 30 }\n\n// Using for...in loop (Session 2)\nfor (let key in person) {\n    console.log(`Key: ${key}, Value: ${person[key]}`);\n}\n// Output: Key: firstName, Value: Robert\n//         Key: last-name, Value: Smith\n//         Key: age, Value: 30\n\n// === 3. ES6 Features: Destructuring, Spread/Rest, Shorthand ===\nlet config = {\n    host: \"localhost\",\n    port: 8080,\n    secure: false\n};\n\n// Destructuring\nlet { host, port, protocol = \"http\" } = config;\nconsole.log(\"Destructured:\", host, port, protocol); // Output: Destructured: localhost 8080 http\nconsole.log(\"Not Destructured:\", config.host, config.port, config.protocol); // Output: Not Destructured: localhost 8080 http\n\n// Spread and rest\nlet defaults = {\n    theme: \"light\",\n    font: \"Arial\"\n};\n\nlet settings = { ...defaults, font: \"Helvetica\" };\nconsole.log(\"Merged settings:\", settings); // Output: Merged settings: { theme: \"light\", font: \"Helvetica\" }\n\nlet { theme, ...rest } = settings;\nconsole.log(\"Rest:\", rest); // Output: Rest: { font: \"Helvetica\" }\n\n// Another example of rest\nfunction myFun(a, b, ...manyMoreArgs) {\n  console.log(\"a\", a);\n  console.log(\"b\", b);\n  console.log(\"manyMoreArgs\", manyMoreArgs);\n}\n\nmyFun(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n\n// Console Output:\n// a, one\n// b, two\n// manyMoreArgs, [\"three\", \"four\", \"five\", \"six\"]\n\n\n// Shorthand\nlet id = 1;\nlet name = \"Product\";\nlet item = {\n    id,\n    name,\n    getInfo() {\n        return `${this.name} (ID: ${this.id})`;\n    }\n};\nconsole.log(\"Item info:\", item.getInfo()); // Output: Item info: Product (ID: 1)\n\n\n\n// === 4. JSON Basics and Serialization ===\nlet data = [\n    { id: 1, name: \"Item1\" },\n    { id: 2, name: \"Item2\" }\n]; // Array from Session 4\nlet json = JSON.stringify(data);\nconsole.log(\"JSON string:\", json); // Output: JSON string: [{\"id\":1,\"name\":\"Item1\"},{\"id\":2,\"name\":\"Item2\"}]\nlet parsedData = JSON.parse(json);\nconsole.log(\"Parsed first item:\", parsedData[0].name); // Output: Parsed first item: Item1\n\n// Error handling (Session 3)\ntry {\n    JSON.parse(\"invalid JSON\");\n} catch (error) {\n    console.error(\"Parse error:\", error.message); // Output: Parse error: Unexpected token i in JSON at position 0\n}\n\n// === 5. Classes ===\nclass Product {\n    constructor(name, price) {\n        if (typeof price !== \"number\" || price < 0) {\n            throw new Error(\"Invalid price\"); // Error handling from Session 3\n        }\n        this.name = name;\n        this.price = price;\n    }\n    applyDiscount(discount) {\n        return this.price * (1 - discount);\n    }\n}\nlet laptop = new Product(\"Laptop\", 1000);\nconsole.log(\"Laptop name:\", laptop.name); // Output: Laptop name: Laptop\nconsole.log(\"Discounted:\", laptop.applyDiscount(0.2)); // Output: Discounted: 800\n\n// Array of instances (Session 4)\nlet products = [\n    new Product(\"Phone\", 500),\n    new Product(\"Tablet\", 300)\n];\nconsole.log(\"Product names:\", products.map(p => p.name)); // Output: Product names: [\"Phone\", \"Tablet\"]\n\n\n// Example of working subrequest without classes\n// const options = {}\n// options.method = \"POST\"\n// options.headers = { \"Content-Type\": \"application/json\" }\n// options.body = data\n\n// const response = await httpRequest(\"https://punk.radiocr.com/pipe\", options); \n\n// Example of the same using classes\n// class SubRequestOptions {\n//   constructor(body, method = \"POST\", headers = { \"Content-Type\": \"application/json\" }) {\n//     this.body = body;\n//     this.method = method;\n//     this.headers = headers; \n//   }\n// }\n\n// const subRequestOptions = new SubRequestOptions(data);\n\n// const response = await httpRequest(\n//   \"https://punk.radiocr.com/pipe\",\n//   subRequestOptions\n// ); \n"
  },
  "stylesheets": [],
  "scripts": [],
  "cssPreset": "",
  "imports": {},
  "types": {},
  "tests": {
    "language": "typescript",
    "content": ""
  },
  "tools": {
    "enabled": "all",
    "active": "console",
    "status": "full"
  },
  "zoom": 1,
  "processors": [],
  "customSettings": {},
  "editor": "monaco",
  "fontFamily": "Fira Code",
  "fontSize": 14,
  "useTabs": false,
  "tabSize": 2,
  "lineNumbers": true,
  "wordWrap": false,
  "closeBrackets": true,
  "foldRegions": false,
  "semicolons": true,
  "singleQuote": false,
  "trailingComma": true,
  "emmet": true,
  "enableAI": false,
  "version": "46"
}