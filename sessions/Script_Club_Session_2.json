{
  "title": "Script Club - Session 2",
  "description": "COnditionals, Loops, Break/Continue statements, Trythy/Falsy values",
  "head": "<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
  "htmlAttrs": "lang=\"en\" class=\"\"",
  "tags": [
    ""
  ],
  "autoupdate": true,
  "autosave": false,
  "autotest": false,
  "delay": 1500,
  "formatOnsave": false,
  "view": "split",
  "mode": "full",
  "theme": "dark",
  "themeColor": "hsl(220, 20%, 50%)",
  "layout": "responsive",
  "editorTheme": "",
  "recoverUnsaved": true,
  "showSpacing": false,
  "welcome": true,
  "readonly": false,
  "allowLangChange": true,
  "activeEditor": "script",
  "languages": [
    "javascript",
    "typescript"
  ],
  "markup": {
    "language": "html",
    "content": ""
  },
  "style": {
    "language": "css",
    "content": ""
  },
  "script": {
    "language": "javascript",
    "content": "// Session 2: Control Structures and Flow\n// Objective: Master control flow with conditionals, loops, truthy/falsy values, and the ternary operator.\n\n// 1. Conditional Statements: if, else if, else\n// Conditionals execute code based on boolean conditions.\n// Use ES6 'let' for block-scoped variables.\nlet userAge = 20;\nif (userAge >= 18) {\n  console.log(\"User is an adult.\"); // Output: User is an adult.\n} else {\n  console.log(\"User is a minor.\");\n}\n\n// Multi-condition example for grading\nlet score = 85;\nif (score >= 90) {\n  console.log(\"Grade: A\");\n} else if (score >= 80) {\n  console.log(\"Grade: B\");\n} else if (score >= 70) {\n  console.log(\"Grade: C\");\n} else {\n  console.log(\"Grade: F\");\n}\n\n// 2. Switch Statement\n// Switch handles multiple discrete values efficiently.\nlet role = \"admin\";\nswitch (role) {\n  case \"admin\":\n    console.log(\"Has admin access.\");\n    break;\n  case \"user\":\n    console.log(\"Has user access.\");\n    break;\n  default:\n    console.log(\"No access.\");\n}\n\n// 3. Ternary Operator\n// Concise if-else alternative: condition ? valueIfTrue : valueIfFalse\nlet isActive = true;\nlet status = isActive ? \"User is active\" : \"User is inactive\";\nconsole.log(status);\n\n// Nested ternary for access levels (use with care)\nlet age = 16;\nlet access = age >= 18 ? \"Full access\" : age >= 13 ? \"Limited access\" : \"No access\";\nconsole.log(\"Access level:\", access); \n\n// 4. Loops: for, while, do-while\n// Loops repeat code based on conditions.\n\n// Basic for loop\nfor (let i = 1; i <= 5; i++) {\n  console.log(\"For loop iteration:\", i);\n}\n\n// Complex for loop: Sum of squares\nlet sumOfSquares = 0;\nfor (let i = 1; i <= 4; i++) {\n  sumOfSquares += i ** 2; // Square each number and add to sum\n  console.log(`Adding ${i}^2 = ${i ** 2}, Current sum: ${sumOfSquares}`);\n}\n// Output: Adding 1^2 = 1, Current sum: 1\n//         Adding 2^2 = 4, Current sum: 5\n//         Adding 3^2 = 9, Current sum: 14\n//         Adding 4^2 = 16, Current sum: 30\nconsole.log(\"Final sum of squares:\", sumOfSquares);\n\n// While loop: Find first power of 2 exceeding 100\nlet power = 1;\nlet exponent = 0;\nwhile (power <= 100) {\n  power *= 2;\n  exponent++;\n}\nconsole.log(`First power of 2 > 100 is 2^${exponent} = ${power}`); // Output: First power of 2 > 100 is 2^7 = 128\n\n// Do-while: Simulate retrying a task\nlet attempts = 0;\ndo {\n  attempts++;\n  console.log(`Attempt ${attempts}`);\n} while (attempts < 2 && Math.random() > 0.5); // Random condition for demo\n\n// Bonus: Math.random() is what's called a static method part of standard built-in objects. \n// There are many of these, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n\n// 5. Break and Continue\n// Break exits loops; continue skips iterations.\nfor (let i = 1; i <= 5; i++) {\n  if (i === 4) {\n    console.log(\"Breaking at i =\", i);\n    break; // Exit at 4\n  }\n  console.log(\"Number:\", i);\n}\n\n// Who can tell me what % is doing here?\nfor (let i = 1; i <= 5; i++) {\n  if (i % 2 === 0) {\n    continue; // Skip even numbers\n  }\n  console.log(\"Odd number:\", i);\n}\n\n// 6. For...in Loop\n// Iterates over enumerable properties of an object (keys).\n// Use with objects, not arrays (less common for arrays in ES6).\nlet user = {\n  name: \"Akamai Learner\",\n  age: 25,\n  role: \"developer\"\n};\nfor (let key in user) {\n  console.log(`Property: ${key}, Value: ${user[key]}`); \n  // Output: Property: name, Value: Akamai Learner\n  //         Property: age, Value: 25\n  //         Property: role, Value: developer\n}\n\n// For...in with array (not recommended, but shown for clarity)\n// Not recommended because it includes inherited properties from the array's prototype. It includes non-integer\n// properties. Also the order of the properties in the array are not guaranteed to match the index order.\n// Finally the indexes are strings, not numbers. Generally should use for loop, for...of or forEach() on arrays.\nlet fruits = [\"apple\", \"banana\", \"orange\"];\nfor (let index in fruits) {\n  console.log(`Index: ${index}, Fruit: ${fruits[index]}`); \n  // Output: Index: 0, Fruit: apple\n  //         Index: 1, Fruit: banana\n  //         Index: 2, Fruit: orange\n}\n\n// 7. For...of Loop\n// Iterates over iterable values (e.g., arrays, strings), not object properties.\n// Preferred for arrays in modern JavaScript.\nlet scores = [85, 90, 95];\nlet total = 0;\nfor (let score of scores) {\n  total += score;\n  console.log(`Adding score: ${score}, Running total: ${total}`);\n}\n// Output: Adding score: 85, Running total: 85\n//         Adding score: 90, Running total: 175\n//         Adding score: 95, Running total: 270\nconsole.log(\"Average score:\", total / scores.length); // Output: Average score: 90\n\n// For...of with a string\nlet message = \"Edge\";\nfor (let char of message) {\n  console.log(\"Character:\", char); \n  // Output: Character: E, Character: d, Character: g, Character: e\n}\n\n// 8. Truthy and Falsy Values\n// Falsy: false, 0, \"\", null, undefined, NaN\n// Truthy: All other values\nlet input = 0;\nconsole.log(\"Is input truthy?\", input ? \"Truthy\" : \"Falsy\"); // Output: Is input truthy? Falsy\n\n// Borrowing from an above example\nisActive = 'false';\nstatus = isActive ? \"User is active\" : \"User is inactive\";\nconsole.log(status); // Output: User is active\n\n// Arrow function to check truthiness\nconst checkTruthy = (val) => val ? \"Truthy\" : \"Falsy\";\nconsole.log(\"Non-empty string:\", checkTruthy(\"Akamai\")); // Output: Non-empty string: Truthy"
  },
  "stylesheets": [],
  "scripts": [],
  "cssPreset": "",
  "imports": {},
  "types": {},
  "tests": {
    "language": "typescript",
    "content": ""
  },
  "tools": {
    "enabled": "all",
    "active": "console",
    "status": "full"
  },
  "zoom": 1,
  "processors": [],
  "customSettings": {},
  "editor": "monaco",
  "fontFamily": "Fira Code",
  "fontSize": 14,
  "useTabs": false,
  "tabSize": 2,
  "lineNumbers": true,
  "wordWrap": false,
  "closeBrackets": true,
  "foldRegions": false,
  "semicolons": true,
  "singleQuote": false,
  "trailingComma": true,
  "emmet": true,
  "enableAI": false,
  "version": "46"
}