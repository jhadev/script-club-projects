{
  "title": "Script Club - Session 6",
  "description": "String methods, template literals, regex and string parsing for Edgeworker use cases.",
  "head": "<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
  "htmlAttrs": "lang=\"en\" class=\"\"",
  "tags": [],
  "autoupdate": true,
  "autosave": false,
  "autotest": false,
  "delay": 1500,
  "formatOnsave": false,
  "view": "split",
  "mode": "full",
  "theme": "dark",
  "themeColor": "hsl(220, 20%, 50%)",
  "layout": "responsive",
  "editorTheme": "",
  "recoverUnsaved": true,
  "showSpacing": false,
  "welcome": true,
  "readonly": false,
  "allowLangChange": true,
  "activeEditor": "markup",
  "languages": [
    "js",
    "ts"
  ],
  "markup": {
    "language": "html",
    "content": ""
  },
  "style": {
    "language": "css",
    "content": ""
  },
  "script": {
    "language": "javascript",
    "content": "// === 1. String Basics and Key Methods ===\nlet url = \"https://example.com/api/user/user\";\nconsole.log(\"Slice:\", url.slice(8, 15)); // Output: Slice: example\nconsole.log(\"Slice:\", url.slice(-2)); // Output: Slice: example\n\nconsole.log(\"Substring:\", url.substring(8, 15)); // Output: Substring: example\n\nconsole.log(\"Replace:\", url.replace(\"user\", \"profile\")); // Output: Replace: https://example.com/api/profile\nconsole.log(\"Replace:\", url.replace(/user/g, \"profile\")); // Output: Replace: https://example.com/api/profile\nconsole.log(\"Var\".replace(\"\", \"_\"));\n\nconsole.log(\"Uppercase:\", url.toUpperCase()); // Output: Uppercase: HTTPS://EXAMPLE.COM/API/USER\nconsole.log(\"Lowercase:\", url.toLowerCase()); // Output: Lowercase: https://example.com/api/user\n\n// Additional methods\nlet header = \"  Content-Type: text/html  \";\nconsole.log(\"Trim:\", header.trim()); // Output: Trim: Content-Type: text/html\nconsole.log(\"Includes text:\", header.includes(\"text\")); // Output: Includes text: true\nconsole.log(\"Starts with:\", header.startsWith(\"  Con\")); // Output: Starts with: true\nconsole.log(\"Starts with:\", header.trim().startsWith(\"Con\")); // Output: Starts with: true\n\nconsole.log(\"Split:\", header.split(\":\")); // Output: Split: [\"  Content-Type\", \" text/html  \"]\n\nlet sentence = 'Hi my name is Ryan';\nlet sentenceSplit = sentence.split(' ');\nconsole.log(sentenceSplit[0]);\n\n// === 2. ES6 Template Literals ===\nlet user = {\n  name: \"Alice\",\n  role: \"admin\"\n};\n\nlet message = `User: ${user.name}, Role: ${user.role}`;\nconsole.log(\"Message:\", message); // Output: Message: User: Alice, Role: admin\n\n// Multiline for EdgeWorkers logging\nlet log = `\n  EdgeWorker Request:\n  Path: /api/user\n  Method: GET\n`;\nconsole.log(\"Log:\", log);\n// Output: Log:\n//   EdgeWorker Request:\n//   Path: /api/user\n//   Method: GET\n\n// === 3. Basic Regular Expressions ===\nlet path = \"https://example.com/user/123?token=abc123\";\nlet userIdPattern = /\\d+/; // Matches one or more digits\nconsole.log(\"Match ID:\", path.match(userIdPattern)); // Output: Match ID: [\"123\"]\nconsole.log(\"Match Index:\", path.search(userIdPattern)); // Search returns index of 1st match. Output: Match Index: 25\nconsole.log(\"Test ID:\", userIdPattern.test(path)); // Output: Test ID: true\n\n// EdgeWorkers header validation\nlet headerValue = \"Content-Type: application/json\";\nlet jsonPattern = /application\\/json/;\nconsole.log(\"Is JSON:\", jsonPattern.test(headerValue)); // Output: Is JSON: true\n\n// Query param extraction\nlet query = \"user=alice&role=admin\";\nlet paramPattern = /user=(\\w+)/;\nconsole.log(\"Match param:\", query.match(paramPattern)); // Output: Match param: [\"user=alice\", \"alice\"]\n\n// === 4. Web URL API ===\nlet addr = new URL(\"https://www.example.com/api/user?user=alice&role=admin\");\nconsole.log(\"Host:\", addr.host); // Output: Host: example.com\nconsole.log(\"Pathname:\", addr.pathname); // Output: Pathname: /api/user\nconsole.log(\"User param:\", addr.searchParams.get(\"user\")); // Output: User param: alice\n\n// Modify query params\naddr.searchParams.set(\"role\", \"manager\");\naddr.searchParams.append('test', '12345');\nconsole.log(\"Updated URL:\", addr.href); // Output: Updated URL: https://example.com/api/user?user=alice&role=manager\n\n// Error handling (Session 3)\ntry {\n  let invalid = new URL(\"invalid-url\");\n} catch (error) {\n  console.error(\"URL error:\", error.message); // Output: URL error: Failed to construct 'URL': Invalid URL\n}\n\n// === String Parsing ===\nfunction parseQuery(query) {\n  try {\n    let params = query.split(\"&\").map(pair => {\n      let [key, value] = pair.split(\"=\"); // Array destructuring from Session 5\n      return { key, value }; // Object shorthand from Session 5\n    });\n    return params;\n  } catch (error) {\n    console.error(\"Parse error:\", error.message); // Error handling from Session 3\n    return [];\n  }\n}\nlet queryString = \"user=alice&role=admin\";\nconsole.log(\"Parsed query:\", parseQuery(queryString)); // Output: Parsed query: [{ key: \"user\", value: \"alice\" }, { key: \"role\", value: \"admin\" }]\n\n// Template literal for logging (Session 6)\nlet logEntry = `Parsed query: ${JSON.stringify(parseQuery(queryString))}`; // JSON from Session 5\nconsole.log(\"Log entry:\", logEntry); // Output: Log entry: Parsed query: [{\"key\":\"user\",\"value\":\"alice\"},{\"key\":\"role\",\"value\":\"admin\"}]\n\n\n// Header validation with regex\nfunction validateHeader(header) {\n  let pattern = /[a-z]+-[a-z]+/i; // Case-insensitive header pattern\n  return pattern.test(header) ? header.toLowerCase() : \"invalid\";\n}\nconsole.log(\"Validate header:\", validateHeader(\"Content-Type\")); // Output: Validate header: content-type\nconsole.log(\"Validate header:\", validateHeader(\"InvalidHeader\")); // Output: Validate header: invalid\n\n\n// === 4. URL Parsing for EdgeWorkers. Example from Techdocs ===\n// request = https://example.com/api/user?user=alice&role=manager\n// \n// \n// import URLSearchParams from 'url-search-params';  \n// export function onClientRequest(request) {\n//   var params = new URLSearchParams(request.query);\n//   if (params.get('user')) {\n//     request.respondWith(200, {}, '');\n//   } else {\n//     request.respondWith(418, {}, '');\n//   }\n// }\n\n// === 6. Additional Regular Expressions (W3Schools Examples) ===\n// Regex Reference Table:\n// | Class             | Description                                     |\n// |-------------------|-------------------------------------------------|\n// | Flags: /g         | Global match (finds all occurrences)             |\n// | Flags: /i         | Case-insensitive matching                       |\n// | Flags: /u         | Enables Unicode support (ES2015)                |\n// | Metachar: \\d      | Matches digits (0-9)                            |\n// | Metachar: \\w      | Matches word characters (a-z, A-Z, 0-9, _)      |\n// | Metachar: \\s      | Matches whitespace (spaces, tabs, etc.)         |\n// | Quantifier: x*     | Matches zero or more of x                       |\n// | Quantifier: x?     | Matches zero or one of x                        |\n// | Quantifier: x{n}   | Matches exactly n occurrences of x              |\n// | Assertion: ^      | Matches start of string                         |\n// | Assertion: $      | Matches end of string                           |\n// | Assertion: \\b     | Matches word boundary                           |\n// | Assertion: (?=...) | Lookahead (matches if followed by ...)         |\n// | Assertion: (?<=...) | Lookbehind (matches if preceded by ...)       |\n// | Char Class: [a]   | Matches the character a                         |\n// | Char Class: [abc] | Matches any of a, b, or c                       |\n// | Char Class: [a-z] | Matches any character from a to z               |\n// | Char Class: [0-9] | Matches any digit from 0 to 9                   |\n\n// Case-insensitive search (/i flag)\nlet text1 = \"Visit W3Schools\";\nlet pattern1 = /w3schools/i;\nconsole.log(\"Case-insensitive match:\", text1.match(pattern1)); // Output: [\"W3Schools\"]\nconsole.log(\"Case-insensitive search:\", text1.search(pattern1)); // Output: 6\n\n// Global search (/g flag)\nlet text2 = \"Is this all there is?\";\nlet pattern2 = /is/g;\nconsole.log(\"Global match:\", text2.match(pattern2)); // Output: [\"is\", \"is\"]\n\n// Alternation (OR with |)\nlet text3 = \"Black, white, red, green, blue, yellow.\";\nlet pattern3 = /red|green|blue/g;\nconsole.log(\"Alternation match:\", text3.match(pattern3)); // Output: [\"red\", \"green\", \"blue\"]\n\n// Metacharacter: \\d (digits)\nlet text4 = \"Give 100%!\";\nlet pattern4 = /\\d/g;\nconsole.log(\"Digit match:\", text4.match(pattern4)); // Output: [\"1\", \"0\", \"0\"]\n\n// Metacharacter: \\w (word characters)\nlet text5 = \"Give 100%!\";\nlet pattern5 = /\\w/g;\nconsole.log(\"Word char match:\", text5.match(pattern5)); // Output: [\"G\", \"i\", \"v\", \"e\", \"1\", \"0\", \"0\"]\n\n// Quantifier: x? (zero or one)\nlet text6 = \"1, 100 or 1000?\";\nlet pattern6 = /10?/g;\nconsole.log(\"Zero or one match:\", text6.match(pattern6)); // Output: [\"1\", \"10\", \"10\"]\n\n// Assertion: ^ (start of string)\nlet text7 = \"W3Schools Tutorial\";\nlet pattern7 = /^W3Schools/;\nconsole.log(\"Start of string test:\", pattern7.test(text7)); // Output: true\nlet text8 = \"Hello W3Schools\";\nconsole.log(\"Start of string test (false):\", pattern7.test(text8)); // Output: false\n\n// Assertion: $ (end of string)\nlet text9 = \"Hello W3Schools\";\nlet pattern8 = /W3Schools$/;\nconsole.log(\"End of string test:\", pattern8.test(text9)); // Output: true\nlet text10 = \"W3Schools tutorial\";\nconsole.log(\"End of string test (false):\", pattern8.test(text10)); // Output: false\n\n// Character class: [0-9] (digits)\nlet text11 = \"More than 1000 times\";\nlet pattern9 = /[0-9]/g;\nconsole.log(\"Digit class match:\", text11.match(pattern9)); // Output: [\"1\", \"0\", \"0\", \"0\"]\n\n// EdgeWorkers example: Validate API route\nlet route = \"/api/user/123\";\nlet apiPattern = /^\\/api/;\nconsole.log(\"API route test:\", apiPattern.test(route)); // Output: true"
  },
  "stylesheets": [],
  "scripts": [],
  "cssPreset": "",
  "imports": {},
  "types": {},
  "tests": {
    "language": "typescript",
    "content": ""
  },
  "tools": {
    "enabled": "all",
    "active": "console",
    "status": "full"
  },
  "zoom": 1,
  "processors": [],
  "customSettings": {},
  "editor": "monaco",
  "fontFamily": "Fira Code",
  "fontSize": 14,
  "useTabs": false,
  "tabSize": 2,
  "lineNumbers": true,
  "wordWrap": false,
  "closeBrackets": true,
  "foldRegions": false,
  "semicolons": true,
  "singleQuote": false,
  "trailingComma": true,
  "emmet": true,
  "enableAI": false,
  "version": "46"
}