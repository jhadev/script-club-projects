{
  "title": "Script Club - Session 3",
  "description": "Function delcarations, expressions and arrow functions, Parameters, returns, Variable scopes and basic error handling.",
  "head": "<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
  "htmlAttrs": "lang=\"en\" class=\"\"",
  "tags": [
    ""
  ],
  "autoupdate": true,
  "autosave": false,
  "autotest": false,
  "delay": 1500,
  "formatOnsave": false,
  "view": "split",
  "mode": "full",
  "theme": "dark",
  "themeColor": "hsl(220, 20%, 50%)",
  "layout": "responsive",
  "editorTheme": "",
  "recoverUnsaved": true,
  "showSpacing": false,
  "welcome": true,
  "readonly": false,
  "allowLangChange": true,
  "activeEditor": "script",
  "languages": [
    "javascript",
    "typescript"
  ],
  "markup": {
    "language": "html",
    "content": ""
  },
  "style": {
    "language": "css",
    "content": ""
  },
  "script": {
    "language": "javascript",
    "content": "// JavaScript Training Session 3: Functions and Scope\n// Objective: Learn function declarations, expressions, arrow functions, parameters,\n// default parameters, return statements, scope, and basic error handling\n\n// MDN Web Docs Functions\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\n\n// === 1. Function Declarations ===\n// A function declaration defines a reusable block of code with a name\n// Can call them before definition\nfunction greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n// greet(\"Remmy\"); \n\n// Example: Function to calculate square of a number\nfunction square(num) {\n  return num * num;\n}\n// console.log(\"Square of 4:\", square(4)); // Output: Square of 4: 16\n\n// === 2. Function Expressions ===\n// A function expression assigns an anonymous function to a variable\n// Must be defined before calling\nconst add = function(a, b) {\n  return a + b;\n};\n// console.log(\"2 + 3 =\", add(2, 3)); // Output: 2 + 3 = 5\n\n// Example: Function expression for subtraction\nconst subtract = function(a, b) {\n  return a - b;\n};\n// console.log(\"5 - 2 =\", subtract(5, 2)); // Output: 5 - 2 = 3\n\n// === 3. Arrow Functions ===\n// Arrow functions are concise, ES6 syntax for functions\n// Great for one-liners, but no 'this' binding\nconst multiply = (x, y) => x * y;\n// console.log(\"4 * 5 =\", multiply(4, 5)); // Output: 4 * 5 = 20\n\n// Example: Arrow function with a block body\nconst divide = (a, b) => {\n  return a / b;\n};\n// console.log(\"10 / 2 =\", divide(10, 2)); // Output: 10 / 2 = 5\n\n// === 4. Parameters and Default Parameters ===\n// Parameters let functions accept inputs; defaults provide fallbacks\n// Default parameters handle missing arguments\nfunction welcomeUser(name = \"Guest\", greeting = \"Welcome\") {\n  return `${greeting}, ${name}!`;\n}\n// console.log(welcomeUser(\"Akamaites\")); // Output: Welcome, Akamaites!\n// console.log(welcomeUser()); // Output: Welcome, Guest!\n\n// Example: Function with multiple parameters\nfunction calculateTotal(price, quantity = 1) {\n  return price * quantity;\n}\n// console.log(\"Total for 10 items at $5:\", calculateTotal(5, 10)); // Output: Total for 10 items at $5: 50\n// console.log(\"Total for 1 item at $5:\", calculateTotal(5)); // Output: Total for 1 item at $5: 5\n\n// === 5. Return Statements ===\n// Return sends a value back and ends the function\n// Without return, function returns undefined\nfunction isPositive(num) {\n  if (num > 0) {\n    return true;\n  }\n  return false;\n}\n// console.log(\"Is 5 positive?\", isPositive(5)); // Output: Is 5 positive? true\n// console.log(\"Is -2 positive?\", isPositive(-2)); // Output: Is -2 positive? false\n\n// Example: Early return to skip unnecessary code\nfunction getDiscount(price) {\n  if (price < 10) {\n    return 0; // No discount for cheap items\n  }\n  return price * 0.1; // 10% discount\n}\n// console.log(\"Discount for $20:\", getDiscount(20)); // Output: Discount for $20: 2\n\n// === 6. Variable Scope ===\n// Scope controls where variables are accessible\n// Use let/const for block scope, avoid global var\nlet globalVar = \"I’m global!\";\nfunction testScope() {\n  let localVar = \"I’m local!\";\n  var functionVar = \"I’m function-scoped!\";\n  if (true) {\n    let blockVar = \"I’m block-scoped!\";\n    // console.log(\"Inside block:\", globalVar, localVar, functionVar, blockVar);\n    // Output: Inside block: I’m global! I’m local! I’m function-scoped! I’m block-scoped!\n  }\n  // console.log(\"Inside function:\", globalVar, localVar, functionVar); // Output: Inside function: I’m global! I’m local! I’m function-scoped!\n  // console.log(blockVar); // Error: blockVar is not defined\n}\ntestScope();\n// console.log(localVar); // Error: localVar is not defined\n// console.log(globalVar); // Output: I’m global!\n\n// MDN Web Docs Functions\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\n\n// === 7. Basic Error Handling ===\n// Try-catch handles errors gracefully; throw creates custom errors\n// Prevents crashes and improves user experience\nfunction safeDivide(a, b) {\n  try {\n    if (b === 0) {\n      throw new Error(\"Cannot divide by zero!\");\n    }\n    return a / b;\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    return null;\n  }\n}\n// console.log(safeDivide(10, 2)); // Output: 5\n// console.log(safeDivide(10, 0)); // Output: Error: Cannot divide by zero! null\n\n// Example: Validate input type\nfunction processAge(age) {\n  try {\n    if (typeof age !== \"number\" || age < 0) {\n      throw new Error(\"Age must be a non-negative number\");\n    }\n    return `Age is ${age}`;\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    return \"Invalid age\";\n  }\n}\n// console.log(processAge(25)); // Output: Age is 25\n// console.log(processAge(\"twenty\")); // Output: Error: Age must be a non-negative number. Invalid age"
  },
  "stylesheets": [],
  "scripts": [],
  "cssPreset": "",
  "imports": {},
  "types": {},
  "tests": {
    "language": "typescript",
    "content": ""
  },
  "tools": {
    "enabled": "all",
    "active": "console",
    "status": "full"
  },
  "zoom": 1,
  "processors": [],
  "customSettings": {},
  "editor": "monaco",
  "fontFamily": "Fira Code",
  "fontSize": 14,
  "useTabs": false,
  "tabSize": 2,
  "lineNumbers": true,
  "wordWrap": false,
  "closeBrackets": true,
  "foldRegions": false,
  "semicolons": true,
  "singleQuote": false,
  "trailingComma": true,
  "emmet": true,
  "enableAI": false,
  "version": "46"
}