{
  "title": "Script Club - Session 4",
  "description": "Arrays, indexing and basic methods, ES6 array methods, iterating array and debugging techniques.",
  "head": "<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
  "htmlAttrs": "lang=\"en\" class=\"\"",
  "tags": [],
  "autoupdate": true,
  "autosave": false,
  "autotest": false,
  "delay": 1500,
  "formatOnsave": false,
  "view": "split",
  "mode": "full",
  "theme": "dark",
  "layout": "responsive",
  "recoverUnsaved": true,
  "showSpacing": false,
  "welcome": true,
  "readonly": false,
  "allowLangChange": true,
  "activeEditor": "markup",
  "languages": [
    "js",
    "ts"
  ],
  "markup": {
    "language": "html",
    "content": ""
  },
  "style": {
    "language": "css",
    "content": ""
  },
  "script": {
    "language": "javascript",
    "content": "// Session 4 - Arrays and Iteration\n\n\n// let's demonstrate a few array techniques at once.\n\n// declare an empty array called numbers\n\nconsole.log(\"Session 4: Arrays and Iteration\")\n\nlet numbers = [];\n\n// we are going to put some numbers into this array with a loop\n\n// we can just write a for loop here in the global scope and it will work fine, but what if we want to reuse the loop? we can make a function\n\nfunction fillNumbersArray() {\n  for (let i = 1; i <= 10; i++) {\n    // so we made our loop that is going to run from 1 to 10\n    // our goal is to add 1 - 10 into the numbers array\n    // we can use a built in javascript array method called .push\n\n    // we chain the method to the end of the name of the array and it can take infinite arguments. but in this case we are pushing the value of i into the array at every iteration.\n    numbers.push(i);\n  }\n}\n\n// call our function\n\nfillNumbersArray();\n\n\n\n// ---------------------------------\n// console.log(`.push(): `, numbers);\n\n// forEach - another way to iterate through an array\n\n// ---------------------------------\n// numbers.forEach((number, index) => console.log(`forEach - index: ${index}, value: ${number}`))\n\n// now we can explore some other array methods\n\n// .pop()\n\n// this method mutates our original array and removes the LAST element\n\nnumbers.pop();\n\n// notice 10 is gone\n// ---------------------------------\n// console.log(`.pop(): `, numbers);\n\n// .shift()\n\n// this method also mutates our original array and removes the FIRST element\n\nnumbers.shift();\n// notice 1 is gone\n// ---------------------------------\n// console.log(`.shift(): `, numbers);\n\n// .unshift() also mutates our original array and adds whatever we include as arguments to the BEGINNING of the array\n// we added 1 back\nnumbers.unshift(1);\n\n// ---------------------------------\n// console.log(`.unshift(): `, numbers);\n\n// .includes() can check if the value passed into the argument of this method is present in the array - returns true or false\n\n// ---------------------------------\n// console.log(`.includes(): `, numbers.includes(3));\n// ---------------------------------\n// console.log(`.includes(): `, numbers.includes(10));\n\n/* \n\n================================================================================\n================================================================================\n\n*/\n\n// The .find() method returns the value of the FIRST element in the array that satisfies the provided testing function. Otherwise undefined is returned.\n\nconst students = [\n  { name: \"Bob\", grade: \"A\" },\n  { name: \"Charlie\", grade: \"B\" },\n  { name: \"Diana\", grade: \"A+\" }\n];\n\nconst result = students.find(student => student.name === \"Diana\")\n\n// returns the entire object that matches the condition\n\n// ---------------------------------\n// console.log(`.find(): `, result)\n\n\n// The filter() method creates a new array with all elements that pass the test implemented by the provided function.\n\n// here we want to filter our numbers array to give us a new array of numbers that are less than 5\n\nconst filtered = numbers.filter(number => number < 5)\n\n// ---------------------------------\n// console.log(`.filter(): `, filtered)\n\n// The map() method creates a new array with the results of calling a provided function on every element in the calling array.\n\n// here we want to create a new array of numbers by multiplying each number in the array by 2\n\nconst mapped = numbers.map(number => number * 2)\n\n// ---------------------------------\n// console.log(`.map(): `, mapped)\n\n// let's take what we've learned here and apply them together. \n// We have variable called mapped it is holding an array of even numbers from 2 to 18. \n// Now we want a new array of even numbers but only between 4 and 14\n\nconst evensArray = mapped.filter((number) => {\n  return number >= 4 && number <= 14;\n});\n\n// ---------------------------------\n// console.log(`evensArray: `, evensArray);\n\n// .reduce()\n\n// The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.\n\n// here we want the sum every element in our evensArray\n// this method can be used for many things beyond this, for example merging an array of arrays into one single array, and can also be used to count how many times a specific element in an array is repeated among many other things.\n\n\nconst sum = evensArray.reduce((accumulator, currentValue) => {\n  return accumulator + currentValue\n}, 0)\n\n// ---------------------------------\n//console.log(`.reduce() `, sum)\n\n"
  },
  "stylesheets": [],
  "scripts": [],
  "cssPreset": "",
  "imports": {},
  "types": {},
  "tests": {
    "language": "typescript",
    "content": ""
  },
  "tools": {
    "enabled": "all",
    "active": "console",
    "status": "full"
  },
  "zoom": 1,
  "processors": [],
  "customSettings": {},
  "useTabs": false,
  "tabSize": 2,
  "lineNumbers": true,
  "wordWrap": false,
  "closeBrackets": true,
  "foldRegions": false,
  "semicolons": true,
  "singleQuote": false,
  "trailingComma": true,
  "emmet": true,
  "enableAI": false,
  "version": "46"
}